/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
export var commonStringsDefault = {
    open: 'Open',
    close: 'Close',
    show: 'Show',
    hide: 'Hide',
    expand: 'Expand',
    collapse: 'Collapse',
    more: 'More',
    select: 'Select',
    selectAll: 'Select All',
    previous: 'Previous',
    next: 'Next',
    current: 'Jump to current',
    info: 'Info',
    success: 'Success',
    warning: 'Warning',
    danger: 'Error',
    rowActions: 'Available actions',
    pickColumns: 'Show or hide columns',
    showColumns: 'Show Columns',
    sortColumn: 'Sort Column',
    firstPage: 'First Page',
    lastPage: 'Last Page',
    nextPage: 'Next Page',
    previousPage: 'Previous Page',
    currentPage: 'Current Page',
    totalPages: 'Total Pages',
    minValue: 'Min value',
    maxValue: 'Max value',
    modalContentStart: 'Beginning of Modal Content',
    modalContentEnd: 'End of Modal Content',
    showColumnsMenuDescription: 'Show or hide columns menu',
    allColumnsSelected: 'All columns selected',
    signpostToggle: 'Signpost Toggle',
    signpostClose: 'Signpost Close',
    loading: 'Loading',
    singleSelectionAriaLabel: 'Single selection header',
    singleActionableAriaLabel: 'Single actionable header',
    detailExpandableAriaLabel: 'Toggle more row content',
    datagridFilterAriaLabel: 'Toggle column filter',
    // Alert
    alertCloseButtonAriaLabel: 'Close alert',
    // Date Picker
    datepickerToggle: 'Toggle datepicker',
    datepickerPreviousMonth: 'Previous month',
    datepickerCurrentMonth: 'Current month',
    datepickerNextMonth: 'Next month',
    datepickerPreviousDecade: 'Previous decade',
    datepickerNextDecade: 'Next decade',
    datepickerCurrentDecade: 'Current decade',
    datepickerSelectMonthText: 'Select month, the current month is {CALENDAR_MONTH}',
    datepickerSelectYearText: 'Select year, the current year is {CALENDAR_YEAR}',
    daypickerSRCurrentMonthPhrase: 'The current month is {CURRENT_MONTH}',
    daypickerSRCurrentYearPhrase: 'The current year is {CURRENT_YEAR}',
    daypickerSRCurrentDecadePhrase: 'The current decade is {DECADE_RANGE}',
    // Stack View
    stackViewChanged: 'Value changed.',
    //Vertical Nav
    verticalNavToggle: 'Toggle navigation group',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLXN0cmluZ3MuZGVmYXVsdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbInV0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3MuZGVmYXVsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBSUgsTUFBTSxDQUFDLElBQU0sb0JBQW9CLEdBQXFCO0lBQ3BELElBQUksRUFBRSxNQUFNO0lBQ1osS0FBSyxFQUFFLE9BQU87SUFDZCxJQUFJLEVBQUUsTUFBTTtJQUNaLElBQUksRUFBRSxNQUFNO0lBQ1osTUFBTSxFQUFFLFFBQVE7SUFDaEIsUUFBUSxFQUFFLFVBQVU7SUFDcEIsSUFBSSxFQUFFLE1BQU07SUFDWixNQUFNLEVBQUUsUUFBUTtJQUNoQixTQUFTLEVBQUUsWUFBWTtJQUN2QixRQUFRLEVBQUUsVUFBVTtJQUNwQixJQUFJLEVBQUUsTUFBTTtJQUNaLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsSUFBSSxFQUFFLE1BQU07SUFDWixPQUFPLEVBQUUsU0FBUztJQUNsQixPQUFPLEVBQUUsU0FBUztJQUNsQixNQUFNLEVBQUUsT0FBTztJQUNmLFVBQVUsRUFBRSxtQkFBbUI7SUFDL0IsV0FBVyxFQUFFLHNCQUFzQjtJQUNuQyxXQUFXLEVBQUUsY0FBYztJQUMzQixVQUFVLEVBQUUsYUFBYTtJQUN6QixTQUFTLEVBQUUsWUFBWTtJQUN2QixRQUFRLEVBQUUsV0FBVztJQUNyQixRQUFRLEVBQUUsV0FBVztJQUNyQixZQUFZLEVBQUUsZUFBZTtJQUM3QixXQUFXLEVBQUUsY0FBYztJQUMzQixVQUFVLEVBQUUsYUFBYTtJQUN6QixRQUFRLEVBQUUsV0FBVztJQUNyQixRQUFRLEVBQUUsV0FBVztJQUNyQixpQkFBaUIsRUFBRSw0QkFBNEI7SUFDL0MsZUFBZSxFQUFFLHNCQUFzQjtJQUN2QywwQkFBMEIsRUFBRSwyQkFBMkI7SUFDdkQsa0JBQWtCLEVBQUUsc0JBQXNCO0lBQzFDLGNBQWMsRUFBRSxpQkFBaUI7SUFDakMsYUFBYSxFQUFFLGdCQUFnQjtJQUMvQixPQUFPLEVBQUUsU0FBUztJQUNsQix3QkFBd0IsRUFBRSx5QkFBeUI7SUFDbkQseUJBQXlCLEVBQUUsMEJBQTBCO0lBQ3JELHlCQUF5QixFQUFFLHlCQUF5QjtJQUNwRCx1QkFBdUIsRUFBRSxzQkFBc0I7SUFDL0MsUUFBUTtJQUNSLHlCQUF5QixFQUFFLGFBQWE7SUFDeEMsY0FBYztJQUNkLGdCQUFnQixFQUFFLG1CQUFtQjtJQUNyQyx1QkFBdUIsRUFBRSxnQkFBZ0I7SUFDekMsc0JBQXNCLEVBQUUsZUFBZTtJQUN2QyxtQkFBbUIsRUFBRSxZQUFZO0lBQ2pDLHdCQUF3QixFQUFFLGlCQUFpQjtJQUMzQyxvQkFBb0IsRUFBRSxhQUFhO0lBQ25DLHVCQUF1QixFQUFFLGdCQUFnQjtJQUN6Qyx5QkFBeUIsRUFBRSxxREFBcUQ7SUFDaEYsd0JBQXdCLEVBQUUsa0RBQWtEO0lBQzVFLDZCQUE2QixFQUFFLHNDQUFzQztJQUNyRSw0QkFBNEIsRUFBRSxvQ0FBb0M7SUFDbEUsOEJBQThCLEVBQUUsc0NBQXNDO0lBQ3RFLGFBQWE7SUFDYixnQkFBZ0IsRUFBRSxnQkFBZ0I7SUFDbEMsY0FBYztJQUNkLGlCQUFpQixFQUFFLHlCQUF5QjtDQUM3QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzIH0gZnJvbSAnLi9jb21tb24tc3RyaW5ncy5pbnRlcmZhY2UnO1xuXG5leHBvcnQgY29uc3QgY29tbW9uU3RyaW5nc0RlZmF1bHQ6IENsckNvbW1vblN0cmluZ3MgPSB7XG4gIG9wZW46ICdPcGVuJyxcbiAgY2xvc2U6ICdDbG9zZScsXG4gIHNob3c6ICdTaG93JyxcbiAgaGlkZTogJ0hpZGUnLFxuICBleHBhbmQ6ICdFeHBhbmQnLFxuICBjb2xsYXBzZTogJ0NvbGxhcHNlJyxcbiAgbW9yZTogJ01vcmUnLFxuICBzZWxlY3Q6ICdTZWxlY3QnLFxuICBzZWxlY3RBbGw6ICdTZWxlY3QgQWxsJyxcbiAgcHJldmlvdXM6ICdQcmV2aW91cycsXG4gIG5leHQ6ICdOZXh0JyxcbiAgY3VycmVudDogJ0p1bXAgdG8gY3VycmVudCcsXG4gIGluZm86ICdJbmZvJyxcbiAgc3VjY2VzczogJ1N1Y2Nlc3MnLFxuICB3YXJuaW5nOiAnV2FybmluZycsXG4gIGRhbmdlcjogJ0Vycm9yJyxcbiAgcm93QWN0aW9uczogJ0F2YWlsYWJsZSBhY3Rpb25zJyxcbiAgcGlja0NvbHVtbnM6ICdTaG93IG9yIGhpZGUgY29sdW1ucycsXG4gIHNob3dDb2x1bW5zOiAnU2hvdyBDb2x1bW5zJyxcbiAgc29ydENvbHVtbjogJ1NvcnQgQ29sdW1uJyxcbiAgZmlyc3RQYWdlOiAnRmlyc3QgUGFnZScsXG4gIGxhc3RQYWdlOiAnTGFzdCBQYWdlJyxcbiAgbmV4dFBhZ2U6ICdOZXh0IFBhZ2UnLFxuICBwcmV2aW91c1BhZ2U6ICdQcmV2aW91cyBQYWdlJyxcbiAgY3VycmVudFBhZ2U6ICdDdXJyZW50IFBhZ2UnLFxuICB0b3RhbFBhZ2VzOiAnVG90YWwgUGFnZXMnLFxuICBtaW5WYWx1ZTogJ01pbiB2YWx1ZScsXG4gIG1heFZhbHVlOiAnTWF4IHZhbHVlJyxcbiAgbW9kYWxDb250ZW50U3RhcnQ6ICdCZWdpbm5pbmcgb2YgTW9kYWwgQ29udGVudCcsXG4gIG1vZGFsQ29udGVudEVuZDogJ0VuZCBvZiBNb2RhbCBDb250ZW50JyxcbiAgc2hvd0NvbHVtbnNNZW51RGVzY3JpcHRpb246ICdTaG93IG9yIGhpZGUgY29sdW1ucyBtZW51JyxcbiAgYWxsQ29sdW1uc1NlbGVjdGVkOiAnQWxsIGNvbHVtbnMgc2VsZWN0ZWQnLFxuICBzaWducG9zdFRvZ2dsZTogJ1NpZ25wb3N0IFRvZ2dsZScsXG4gIHNpZ25wb3N0Q2xvc2U6ICdTaWducG9zdCBDbG9zZScsXG4gIGxvYWRpbmc6ICdMb2FkaW5nJyxcbiAgc2luZ2xlU2VsZWN0aW9uQXJpYUxhYmVsOiAnU2luZ2xlIHNlbGVjdGlvbiBoZWFkZXInLFxuICBzaW5nbGVBY3Rpb25hYmxlQXJpYUxhYmVsOiAnU2luZ2xlIGFjdGlvbmFibGUgaGVhZGVyJyxcbiAgZGV0YWlsRXhwYW5kYWJsZUFyaWFMYWJlbDogJ1RvZ2dsZSBtb3JlIHJvdyBjb250ZW50JyxcbiAgZGF0YWdyaWRGaWx0ZXJBcmlhTGFiZWw6ICdUb2dnbGUgY29sdW1uIGZpbHRlcicsXG4gIC8vIEFsZXJ0XG4gIGFsZXJ0Q2xvc2VCdXR0b25BcmlhTGFiZWw6ICdDbG9zZSBhbGVydCcsXG4gIC8vIERhdGUgUGlja2VyXG4gIGRhdGVwaWNrZXJUb2dnbGU6ICdUb2dnbGUgZGF0ZXBpY2tlcicsXG4gIGRhdGVwaWNrZXJQcmV2aW91c01vbnRoOiAnUHJldmlvdXMgbW9udGgnLFxuICBkYXRlcGlja2VyQ3VycmVudE1vbnRoOiAnQ3VycmVudCBtb250aCcsXG4gIGRhdGVwaWNrZXJOZXh0TW9udGg6ICdOZXh0IG1vbnRoJyxcbiAgZGF0ZXBpY2tlclByZXZpb3VzRGVjYWRlOiAnUHJldmlvdXMgZGVjYWRlJyxcbiAgZGF0ZXBpY2tlck5leHREZWNhZGU6ICdOZXh0IGRlY2FkZScsXG4gIGRhdGVwaWNrZXJDdXJyZW50RGVjYWRlOiAnQ3VycmVudCBkZWNhZGUnLFxuICBkYXRlcGlja2VyU2VsZWN0TW9udGhUZXh0OiAnU2VsZWN0IG1vbnRoLCB0aGUgY3VycmVudCBtb250aCBpcyB7Q0FMRU5EQVJfTU9OVEh9JyxcbiAgZGF0ZXBpY2tlclNlbGVjdFllYXJUZXh0OiAnU2VsZWN0IHllYXIsIHRoZSBjdXJyZW50IHllYXIgaXMge0NBTEVOREFSX1lFQVJ9JyxcbiAgZGF5cGlja2VyU1JDdXJyZW50TW9udGhQaHJhc2U6ICdUaGUgY3VycmVudCBtb250aCBpcyB7Q1VSUkVOVF9NT05USH0nLFxuICBkYXlwaWNrZXJTUkN1cnJlbnRZZWFyUGhyYXNlOiAnVGhlIGN1cnJlbnQgeWVhciBpcyB7Q1VSUkVOVF9ZRUFSfScsXG4gIGRheXBpY2tlclNSQ3VycmVudERlY2FkZVBocmFzZTogJ1RoZSBjdXJyZW50IGRlY2FkZSBpcyB7REVDQURFX1JBTkdFfScsXG4gIC8vIFN0YWNrIFZpZXdcbiAgc3RhY2tWaWV3Q2hhbmdlZDogJ1ZhbHVlIGNoYW5nZWQuJyxcbiAgLy9WZXJ0aWNhbCBOYXZcbiAgdmVydGljYWxOYXZUb2dnbGU6ICdUb2dnbGUgbmF2aWdhdGlvbiBncm91cCcsXG59O1xuIl19