/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import * as tslib_1 from "tslib";
import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, Optional, PLATFORM_ID, Renderer2, SkipSelf } from '@angular/core';
import { of, ReplaySubject } from 'rxjs';
import { map } from 'rxjs/operators';
import { IfOpenService } from '../../../utils/conditional/if-open.service';
import { customFocusableItemProvider } from '../../../utils/focus/focusable-item/custom-focusable-item-provider';
import { UNIQUE_ID } from '../../../utils/id-generator/id-generator.service';
import { ArrowKeyDirection } from '../../../utils/focus/arrow-key-direction.enum';
import { FocusService } from '../../../utils/focus/focus.service';
import { linkParent, linkVertical } from '../../../utils/focus/focusable-item/linkers';
import { wrapObservable } from '../../../utils/focus/wrap-observable';
import { take } from 'rxjs/operators';
var DropdownFocusHandler = /** @class */ (function () {
    function DropdownFocusHandler(id, renderer, parent, ifOpenService, focusService, platformId) {
        this.id = id;
        this.renderer = renderer;
        this.parent = parent;
        this.ifOpenService = ifOpenService;
        this.focusService = focusService;
        this.platformId = platformId;
        this._unlistenFuncs = [];
        this.focusBackOnTrigger = false;
        this.resetChildren();
        this.moveToFirstItemWhenOpen();
        if (!this.parent) {
            this.handleRootFocus();
        }
    }
    /**
     * If the dropdown was opened by clicking on the trigger, we automatically move to the first item
     */
    DropdownFocusHandler.prototype.moveToFirstItemWhenOpen = function () {
        var _this = this;
        this.ifOpenService.openChange.subscribe(function (open) {
            if (open && _this.ifOpenService.originalEvent) {
                // Even if we properly waited for ngAfterViewInit, the container still wouldn't be attached to the DOM.
                // So setTimeout is the only way to wait for the container to be ready to move focus to first item.
                setTimeout(function () {
                    _this.focusService.moveTo(_this);
                    if (_this.parent) {
                        _this.focusService.move(ArrowKeyDirection.RIGHT);
                    }
                    else {
                        _this.focusService.move(ArrowKeyDirection.DOWN);
                    }
                });
            }
        });
    };
    /**
     * Focus on the menu when it opens, and focus back on the root trigger when the whole dropdown becomes closed
     */
    DropdownFocusHandler.prototype.handleRootFocus = function () {
        var _this = this;
        this.ifOpenService.openChange.subscribe(function (open) {
            if (!open) {
                // We reset the state of the focus service both on initialization and when closing.
                _this.focusService.reset(_this);
                // But we only actively focus the trigger when closing, not on initialization.
                if (_this.focusBackOnTrigger) {
                    _this.focus();
                }
            }
            _this.focusBackOnTrigger = open;
        });
    };
    Object.defineProperty(DropdownFocusHandler.prototype, "trigger", {
        get: function () {
            return this._trigger;
        },
        set: function (el) {
            var _this = this;
            this._trigger = el;
            this.renderer.setAttribute(el, 'id', this.id);
            if (this.parent) {
                this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowright', function (event) { return _this.ifOpenService.toggleWithEvent(event); }));
            }
            else {
                this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowup', function (event) { return _this.ifOpenService.toggleWithEvent(event); }));
                this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowdown', function (event) { return _this.ifOpenService.toggleWithEvent(event); }));
                this.focusService.listenToArrowKeys(el);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropdownFocusHandler.prototype, "container", {
        get: function () {
            return this._container;
        },
        set: function (el) {
            var _this = this;
            this._container = el;
            // whether root container or not, tab key should always toggle (i.e. close) the container
            this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.tab', function (event) { return _this.ifOpenService.toggleWithEvent(event); }));
            if (this.parent) {
                // if it's a nested container, pressing esc has the same effect as pressing left key, which closes the current
                // popup and moves up to its parent. Here, we stop propagation so that the parent container
                // doesn't receive the esc keydown
                this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.esc', function (event) {
                    _this.focusService.move(ArrowKeyDirection.LEFT);
                    event.stopPropagation();
                }));
            }
            else {
                // The root container is the only one we register to the focus service, others do not need focus
                this.focusService.registerContainer(el);
                // The root container will simply close the container when esc key is pressed
                this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.esc', function (event) { return _this.ifOpenService.toggleWithEvent(event); }));
                // When the user moves focus outside of the menu, we close the dropdown
                this._unlistenFuncs.push(this.renderer.listen(el, 'blur', function (event) {
                    // we clear out any existing focus on the items
                    _this.children.pipe(take(1)).subscribe(function (items) { return items.forEach(function (item) { return item.blur(); }); });
                    // event.relatedTarget is null in IE11. In that case we use document.activeElement which correctly points
                    // to the element we want to check. Note that other browsers might point document.activeElement to the
                    // wrong element. This is ok, because all the other browsers we support relies on event.relatedTarget.
                    var target = event.relatedTarget || document.activeElement;
                    // If the user clicks on an item which triggers the blur, we don't want to close it since it may open a submenu.
                    // In the case of needing to close it (i.e. user selected an item and the dropdown menu is set to close on
                    // selection), dropdown-item.ts handles it.
                    if (target && isPlatformBrowser(_this.platformId)) {
                        if (el.contains(target) || target === _this.trigger) {
                            return;
                        }
                    }
                    // We let the user move focus to where the want, we don't force the focus back on the trigger
                    _this.focusBackOnTrigger = false;
                    _this.ifOpenService.open = false;
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    DropdownFocusHandler.prototype.focus = function () {
        if (this.trigger && isPlatformBrowser(this.platformId)) {
            this.trigger.focus();
        }
    };
    DropdownFocusHandler.prototype.blur = function () {
        if (this.trigger && isPlatformBrowser(this.platformId)) {
            this.trigger.blur();
        }
    };
    DropdownFocusHandler.prototype.activate = function () {
        if (isPlatformBrowser(this.platformId)) {
            this.trigger.click();
        }
    };
    DropdownFocusHandler.prototype.openAndGetChildren = function () {
        var _this = this;
        return wrapObservable(this.children, function () { return (_this.ifOpenService.open = true); });
    };
    DropdownFocusHandler.prototype.closeAndGetThis = function () {
        var _this = this;
        return wrapObservable(of(this), function () { return (_this.ifOpenService.open = false); });
    };
    DropdownFocusHandler.prototype.resetChildren = function () {
        this.children = new ReplaySubject(1);
        if (this.parent) {
            this.right = this.openAndGetChildren().pipe(map(function (all) { return all[0]; }));
        }
        else {
            this.down = this.openAndGetChildren().pipe(map(function (all) { return all[0]; }));
            this.up = this.openAndGetChildren().pipe(map(function (all) { return all[all.length - 1]; }));
        }
    };
    DropdownFocusHandler.prototype.addChildren = function (children) {
        linkVertical(children);
        if (this.parent) {
            linkParent(children, this.closeAndGetThis(), ArrowKeyDirection.LEFT);
        }
        this.children.next(children);
    };
    DropdownFocusHandler.prototype.ngOnDestroy = function () {
        this._unlistenFuncs.forEach(function (unlisten) { return unlisten(); });
        this.focusService.detachListeners();
    };
    DropdownFocusHandler = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Inject(UNIQUE_ID)),
        tslib_1.__param(2, SkipSelf()),
        tslib_1.__param(2, Optional()),
        tslib_1.__param(5, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [String, Renderer2,
            DropdownFocusHandler,
            IfOpenService,
            FocusService,
            Object])
    ], DropdownFocusHandler);
    return DropdownFocusHandler;
}());
export { DropdownFocusHandler };
export var DROPDOWN_FOCUS_HANDLER_PROVIDER = customFocusableItemProvider(DropdownFocusHandler);
//# sourceMappingURL=data:application/json;base64,