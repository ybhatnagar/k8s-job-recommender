import * as tslib_1 from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, HostBinding, ElementRef } from '@angular/core';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
import { AriaLiveService, AriaLivePoliteness } from '../../utils/a11y/aria-live.service';
var ClrSpinner = /** @class */ (function () {
    function ClrSpinner(el, ariaLiveService) {
        this.el = el;
        this.ariaLiveService = ariaLiveService;
    }
    ClrSpinner.prototype.ngAfterViewInit = function () {
        this.ariaLiveService.announce(this.el.nativeElement, this.ariaLive);
    };
    Object.defineProperty(ClrSpinner.prototype, "spinnerClass", {
        /**
         * Default class for all spinners. This class is always true
         */
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "inlineClass", {
        get: function () {
            return this._inline;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrInline", {
        set: function (value) {
            this._inline = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "inverseClass", {
        get: function () {
            return this._inverse;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrInverse", {
        set: function (value) {
            this._inverse = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "smallClass", {
        get: function () {
            return this._small;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrSmall", {
        set: function (value) {
            this._small = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "mediumClass", {
        get: function () {
            if (this._small) {
                return false;
            }
            return this._medium;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrMedium", {
        set: function (value) {
            this._medium = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "ariaLive", {
        get: function () {
            if (isBooleanAttributeSet(this.assertive)) {
                return AriaLivePoliteness.assertive;
            }
            if (isBooleanAttributeSet(this.off)) {
                return AriaLivePoliteness.off;
            }
            return AriaLivePoliteness.polite;
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        HostBinding('class.spinner'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [])
    ], ClrSpinner.prototype, "spinnerClass", null);
    tslib_1.__decorate([
        HostBinding('class.spinner-inline'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [])
    ], ClrSpinner.prototype, "inlineClass", null);
    tslib_1.__decorate([
        Input('clrInline'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ClrSpinner.prototype, "clrInline", null);
    tslib_1.__decorate([
        HostBinding('class.spinner-inverse'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [])
    ], ClrSpinner.prototype, "inverseClass", null);
    tslib_1.__decorate([
        Input('clrInverse'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ClrSpinner.prototype, "clrInverse", null);
    tslib_1.__decorate([
        HostBinding('class.spinner-sm'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [])
    ], ClrSpinner.prototype, "smallClass", null);
    tslib_1.__decorate([
        Input('clrSmall'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ClrSpinner.prototype, "clrSmall", null);
    tslib_1.__decorate([
        HostBinding('class.spinner-md'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [])
    ], ClrSpinner.prototype, "mediumClass", null);
    tslib_1.__decorate([
        Input('clrMedium'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ClrSpinner.prototype, "clrMedium", null);
    tslib_1.__decorate([
        Input('clrAssertive'),
        tslib_1.__metadata("design:type", Boolean)
    ], ClrSpinner.prototype, "assertive", void 0);
    tslib_1.__decorate([
        Input('clrOff'),
        tslib_1.__metadata("design:type", Boolean)
    ], ClrSpinner.prototype, "off", void 0);
    ClrSpinner = tslib_1.__decorate([
        Component({
            selector: 'clr-spinner',
            providers: [AriaLiveService],
            template: "\n    <ng-content></ng-content>\n  ",
            host: {
                '[attr.aria-busy]': 'true',
            }
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef, AriaLiveService])
    ], ClrSpinner);
    return ClrSpinner;
}());
export { ClrSpinner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbInByb2dyZXNzL3NwaW5uZXIvc3Bpbm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxlQUFlLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQVl6RjtJQUNFLG9CQUFvQixFQUFjLEVBQVUsZUFBZ0M7UUFBeEQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUFHLENBQUM7SUFFaEYsb0NBQWUsR0FBZjtRQUNFLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBTUQsc0JBQUksb0NBQVk7UUFKaEI7O1dBRUc7YUFFSDtZQUNFLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQzs7O09BQUE7SUFLRCxzQkFBSSxtQ0FBVzthQUFmO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7OztPQUFBO0lBR0Qsc0JBQUksaUNBQVM7YUFBYixVQUFjLEtBQXVCO1lBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsQ0FBQzs7O09BQUE7SUFJRCxzQkFBSSxvQ0FBWTthQUFoQjtZQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QixDQUFDOzs7T0FBQTtJQUdELHNCQUFJLGtDQUFVO2FBQWQsVUFBZSxLQUF1QjtZQUNwQyxJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLENBQUM7OztPQUFBO0lBYUQsc0JBQUksa0NBQVU7YUFBZDtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQixDQUFDOzs7T0FBQTtJQUdELHNCQUFJLGdDQUFRO2FBQVosVUFBYSxLQUF1QjtZQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLENBQUM7OztPQUFBO0lBZUQsc0JBQUksbUNBQVc7YUFBZjtZQUNFLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZixPQUFPLEtBQUssQ0FBQzthQUNkO1lBQ0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7OztPQUFBO0lBR0Qsc0JBQUksaUNBQVM7YUFBYixVQUFjLEtBQXVCO1lBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsQ0FBQzs7O09BQUE7SUFtQkQsc0JBQUksZ0NBQVE7YUFBWjtZQUNFLElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUN6QyxPQUFPLGtCQUFrQixDQUFDLFNBQVMsQ0FBQzthQUNyQztZQUNELElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNuQyxPQUFPLGtCQUFrQixDQUFDLEdBQUcsQ0FBQzthQUMvQjtZQUNELE9BQU8sa0JBQWtCLENBQUMsTUFBTSxDQUFDO1FBQ25DLENBQUM7OztPQUFBO0lBakdEO1FBREMsV0FBVyxDQUFDLGVBQWUsQ0FBQzs7O2tEQUc1QjtJQUtEO1FBREMsV0FBVyxDQUFDLHNCQUFzQixDQUFDOzs7aURBR25DO0lBR0Q7UUFEQyxLQUFLLENBQUMsV0FBVyxDQUFDOzs7K0NBR2xCO0lBSUQ7UUFEQyxXQUFXLENBQUMsdUJBQXVCLENBQUM7OztrREFHcEM7SUFHRDtRQURDLEtBQUssQ0FBQyxZQUFZLENBQUM7OztnREFHbkI7SUFhRDtRQURDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQzs7O2dEQUcvQjtJQUdEO1FBREMsS0FBSyxDQUFDLFVBQVUsQ0FBQzs7OzhDQUdqQjtJQWVEO1FBREMsV0FBVyxDQUFDLGtCQUFrQixDQUFDOzs7aURBTS9CO0lBR0Q7UUFEQyxLQUFLLENBQUMsV0FBVyxDQUFDOzs7K0NBR2xCO0lBaUJzQjtRQUF0QixLQUFLLENBQUMsY0FBYyxDQUFDOztpREFBb0I7SUFDekI7UUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzs7MkNBQWM7SUFuR25CLFVBQVU7UUFWdEIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGFBQWE7WUFDdkIsU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDO1lBQzVCLFFBQVEsRUFBRSxxQ0FFVDtZQUNELElBQUksRUFBRTtnQkFDSixrQkFBa0IsRUFBRSxNQUFNO2FBQzNCO1NBQ0YsQ0FBQztpREFFd0IsVUFBVSxFQUEyQixlQUFlO09BRGpFLFVBQVUsQ0E2R3RCO0lBQUQsaUJBQUM7Q0FBQSxBQTdHRCxJQTZHQztTQTdHWSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE5IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSG9zdEJpbmRpbmcsIEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzQm9vbGVhbkF0dHJpYnV0ZVNldCB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbXBvbmVudC9pcy1ib29sZWFuLWF0dHJpYnV0ZS1zZXQnO1xuaW1wb3J0IHsgQXJpYUxpdmVTZXJ2aWNlLCBBcmlhTGl2ZVBvbGl0ZW5lc3MgfSBmcm9tICcuLi8uLi91dGlscy9hMTF5L2FyaWEtbGl2ZS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2xyLXNwaW5uZXInLFxuICBwcm92aWRlcnM6IFtBcmlhTGl2ZVNlcnZpY2VdLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgYCxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5hcmlhLWJ1c3ldJzogJ3RydWUnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJTcGlubmVyIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgYXJpYUxpdmVTZXJ2aWNlOiBBcmlhTGl2ZVNlcnZpY2UpIHt9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuYXJpYUxpdmVTZXJ2aWNlLmFubm91bmNlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcy5hcmlhTGl2ZSk7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCBjbGFzcyBmb3IgYWxsIHNwaW5uZXJzLiBUaGlzIGNsYXNzIGlzIGFsd2F5cyB0cnVlXG4gICAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNwaW5uZXInKVxuICBnZXQgc3Bpbm5lckNsYXNzKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gU3R5bGVcbiAgcHJpdmF0ZSBfaW5saW5lOiBib29sZWFuO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNwaW5uZXItaW5saW5lJylcbiAgZ2V0IGlubGluZUNsYXNzKCkge1xuICAgIHJldHVybiB0aGlzLl9pbmxpbmU7XG4gIH1cblxuICBASW5wdXQoJ2NscklubGluZScpXG4gIHNldCBjbHJJbmxpbmUodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICB0aGlzLl9pbmxpbmUgPSBpc0Jvb2xlYW5BdHRyaWJ1dGVTZXQodmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBfaW52ZXJzZTogYm9vbGVhbjtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zcGlubmVyLWludmVyc2UnKVxuICBnZXQgaW52ZXJzZUNsYXNzKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnZlcnNlO1xuICB9XG5cbiAgQElucHV0KCdjbHJJbnZlcnNlJylcbiAgc2V0IGNsckludmVyc2UodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICB0aGlzLl9pbnZlcnNlID0gaXNCb29sZWFuQXR0cmlidXRlU2V0KHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNpemVcbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgYWxsIHNwaW5uZXJzIGFyZSBMYXJnZS4gKHNwaW5uZXItbGcpXG4gICAqIFRvIGNoYW5nZSB0aGUgc2l6ZSB5b3UgbmVlZCB0byB1c2Ugc2V0IGNsclNtYWxsIG9yIGNsck1lZGl1bSB0byBUUlVFL1xuICAgKi9cblxuICAvKipcbiAgICogU21hbGxcbiAgICovXG4gIHByaXZhdGUgX3NtYWxsOiBib29sZWFuO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNwaW5uZXItc20nKVxuICBnZXQgc21hbGxDbGFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5fc21hbGw7XG4gIH1cblxuICBASW5wdXQoJ2NsclNtYWxsJylcbiAgc2V0IGNsclNtYWxsKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5fc21hbGwgPSBpc0Jvb2xlYW5BdHRyaWJ1dGVTZXQodmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gY2xyU21hbGwgJiBjbHJNZWRpdW0gYXJlIHNldCBib3RoIHRvIHRydWUuXG4gICAqIFRoZSBDU1Mgd2l0aCBoaWdoIHByaW9yaXR5IHdpbGwgYmUgc21hbGwgLSBzbyBtZWRpdW0gc2l6ZSB3aWxsIGJlIGlnbm9yZWQuXG4gICAqXG4gICAqIEZvciB0aGlzIHJlYXNvbiBpZiBjbHJTbWFsbCBpcyBzZXQgd2Ugd29uJ3QgYWRkIGNsck1lZGl1bSBjbGFzcy5cbiAgICpcbiAgICogTk9URTogVGhpcyBpcyBkaWN0YXRlZCBieSB0aGUgQ1NTIHJ1bGVzLlxuICAgKiBET04nVCBVU0UgY2xyU21hbGwgJiBjbHJNZWRpdW0gdG8gdG9nZ2xlIGNsYXNzZXMuIFRoaXMgY291bGQgY2hhbmdlIHdpdGhvdXQgbm90aWNlLlxuICAgKlxuICAgKiBBbHNvIHRoZXJlIGlzIG5vIGxvZ2ljYWwgbmVlZCB0byBoYXZlIGJvdGggb2YgdGhlbSBzZXQgdG8gVFJVRSBvciBGQUxTRS5cbiAgICovXG4gIHByaXZhdGUgX21lZGl1bTogYm9vbGVhbjtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zcGlubmVyLW1kJylcbiAgZ2V0IG1lZGl1bUNsYXNzKCkge1xuICAgIGlmICh0aGlzLl9zbWFsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbWVkaXVtO1xuICB9XG5cbiAgQElucHV0KCdjbHJNZWRpdW0nKVxuICBzZXQgY2xyTWVkaXVtKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5fbWVkaXVtID0gaXNCb29sZWFuQXR0cmlidXRlU2V0KHZhbHVlKTtcbiAgfVxuXG4gIC8vIEFyaWEgTGl2ZVxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IGFyaWEtbGl2ZSB3aWxsIGJlIHNldCB0byBgcG9saXRlYCAuXG4gICAqIFRvIGNoYW5nZSBpcyBpdCB5b3UgbmVlZCB0byBzZXQgY2xyQXNzZXJ0aXZlIG9yIGNsck9mZiB0byBUUlVFXG4gICAqXG4gICAqIFRoZXJlIGlzIHByaW9yaXR5OlxuICAgKiAgIERlZmF1bHQ6IHBvbGl0ZVxuICAgKiAgIEFzZXJ0aXZlXG4gICAqICAgT2ZmXG4gICAqXG4gICAqIEluIGNhc2Ugd2hlbiBmb3Igc29tZSByZWFzb24geW91IGhhdmUgY2xyQXNzZXJ0aXZlPVRSVUUgYW5kIGNsck9mZj1UUlVFLFxuICAgKiB3ZSBnb25uYSBzZXQgYGFzc2VydGl2ZWAgYXMgdmFsdWUgb2YgYXJpYS1saXZlLlxuICAgKlxuICAgKi9cbiAgQElucHV0KCdjbHJBc3NlcnRpdmUnKSBhc3NlcnRpdmU6IGJvb2xlYW47XG4gIEBJbnB1dCgnY2xyT2ZmJykgb2ZmOiBib29sZWFuO1xuICBnZXQgYXJpYUxpdmUoKTogQXJpYUxpdmVQb2xpdGVuZXNzIHtcbiAgICBpZiAoaXNCb29sZWFuQXR0cmlidXRlU2V0KHRoaXMuYXNzZXJ0aXZlKSkge1xuICAgICAgcmV0dXJuIEFyaWFMaXZlUG9saXRlbmVzcy5hc3NlcnRpdmU7XG4gICAgfVxuICAgIGlmIChpc0Jvb2xlYW5BdHRyaWJ1dGVTZXQodGhpcy5vZmYpKSB7XG4gICAgICByZXR1cm4gQXJpYUxpdmVQb2xpdGVuZXNzLm9mZjtcbiAgICB9XG4gICAgcmV0dXJuIEFyaWFMaXZlUG9saXRlbmVzcy5wb2xpdGU7XG4gIH1cbn1cbiJdfQ==