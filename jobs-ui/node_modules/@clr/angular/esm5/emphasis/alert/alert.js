import * as tslib_1 from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ChangeDetectorRef, ElementRef, Component, EventEmitter, Input, Optional, Output, ContentChildren, QueryList, } from '@angular/core';
// providers
import { AlertIconAndTypesService } from './providers/icon-and-types.service';
import { MultiAlertService } from './providers/multi-alert.service';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { AriaLiveService, AriaLivePoliteness } from '../../utils/a11y/aria-live.service';
import { ClrAlertText } from './alert-text';
var ClrAlert = /** @class */ (function () {
    function ClrAlert(iconService, cdr, multiAlertService, commonStrings, ariaLiveService) {
        this.iconService = iconService;
        this.cdr = cdr;
        this.multiAlertService = multiAlertService;
        this.commonStrings = commonStrings;
        this.ariaLiveService = ariaLiveService;
        this.isSmall = false;
        this.closable = true;
        this.isAppLevel = false;
        // Aria
        this.clrCloseButtonAriaLabel = this.commonStrings.keys.alertCloseButtonAriaLabel;
        this._closed = false;
        this._closedChanged = new EventEmitter(false);
        /**
         * clrPolite is not used in the code. Is here just to provide
         * code complition and also mark component what type AriaLive
         * will be used.
         */
        this.polite = true;
        this.previouslyHidden = false;
        this.hidden = false;
    }
    ClrAlert.prototype.ngAfterViewInit = function () {
        // Announce the first time the alert is render if it is not hidden
        this.announceAriaLiveMessage();
    };
    Object.defineProperty(ClrAlert.prototype, "alertType", {
        get: function () {
            return this.iconService.alertType;
        },
        set: function (val) {
            this.iconService.alertType = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrAlert.prototype, "ariaLive", {
        /**
         * There is an order on how the attributes will take effect.
         * Assertive, Off, Polite.
         *
         * Polite is default if non is passed.
         *
         * In the case of setting all of them to true. Assertive will be used.
         *
         */
        get: function () {
            if (isBooleanAttributeSet(this.assertive)) {
                return AriaLivePoliteness.assertive;
            }
            if (isBooleanAttributeSet(this.off)) {
                return AriaLivePoliteness.off;
            }
            return AriaLivePoliteness.polite;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrAlert.prototype, "alertIconShape", {
        set: function (value) {
            this.iconService.alertIconShape = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrAlert.prototype, "alertClass", {
        get: function () {
            return this.iconService.iconInfoFromType(this.iconService.alertType).cssClass;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This handle the find what content to be annonced withing the aria-live container
     * alerts that are hidden will be ignored.
     *
     * @remark
     * We depend on the ClrAlertText Directive to find and parse the alert messages.
     * Also this require the HTML markup for the alert to be
     * ```html
     * <div class="alert" role="alert">
     *    <div class="alert-items">
     *        <div class="alert-item static">
     *            <span class="alert-text">
     *                 ...
     *            </span>
     *        </div>
     *    </div>
     * </div>
     * ```
     */
    ClrAlert.prototype.announceAriaLiveMessage = function () {
        if (!this.isHidden && this.alertTexts.length) {
            var message = this.alertTexts.map(function (alertText) { return alertText.nativeElement.textContent; }).join(' ');
            // Don't call announce when there is nothing to say
            if (message) {
                this.ariaLiveService.announce(message, this.ariaLive);
            }
        }
    };
    ClrAlert.prototype.detectChangesIfNeeded = function () {
        if (this.previouslyHidden !== this.hidden) {
            this.previouslyHidden = this.hidden;
            this.cdr.detectChanges();
            // when alert hidden state change we could check and try to announce it.
            this.announceAriaLiveMessage();
        }
    };
    Object.defineProperty(ClrAlert.prototype, "isHidden", {
        get: function () {
            if (this.multiAlertService) {
                // change detection issue in production mode causes currentAlert to be undefined when only the first alert exists
                // https://github.com/vmware/clarity/issues/2430
                if (this.multiAlertService.currentAlert === this || this.multiAlertService.count === 0) {
                    if (this.hidden === true) {
                        this.previouslyHidden = true;
                        this.hidden = false;
                    }
                }
                else if (this.hidden === false) {
                    this.previouslyHidden = false;
                    this.hidden = true;
                }
                this.detectChangesIfNeeded();
            }
            return this.hidden;
        },
        enumerable: true,
        configurable: true
    });
    ClrAlert.prototype.close = function () {
        if (!this.closable) {
            return;
        }
        this._closed = true;
        if (this.multiAlertService) {
            this.multiAlertService.close();
        }
        this._closedChanged.emit(true);
    };
    ClrAlert.prototype.open = function () {
        this._closed = false;
        this._closedChanged.emit(false);
    };
    tslib_1.__decorate([
        Input('clrAlertSizeSmall'),
        tslib_1.__metadata("design:type", Boolean)
    ], ClrAlert.prototype, "isSmall", void 0);
    tslib_1.__decorate([
        Input('clrAlertClosable'),
        tslib_1.__metadata("design:type", Boolean)
    ], ClrAlert.prototype, "closable", void 0);
    tslib_1.__decorate([
        Input('clrAlertAppLevel'),
        tslib_1.__metadata("design:type", Boolean)
    ], ClrAlert.prototype, "isAppLevel", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ClrAlert.prototype, "clrCloseButtonAriaLabel", void 0);
    tslib_1.__decorate([
        Input('clrAlertClosed'),
        tslib_1.__metadata("design:type", Boolean)
    ], ClrAlert.prototype, "_closed", void 0);
    tslib_1.__decorate([
        Output('clrAlertClosedChange'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ClrAlert.prototype, "_closedChanged", void 0);
    tslib_1.__decorate([
        Input('clrAlertType'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], ClrAlert.prototype, "alertType", null);
    tslib_1.__decorate([
        Input('clrPolite'),
        tslib_1.__metadata("design:type", Boolean)
    ], ClrAlert.prototype, "polite", void 0);
    tslib_1.__decorate([
        Input('clrAssertive'),
        tslib_1.__metadata("design:type", Boolean)
    ], ClrAlert.prototype, "assertive", void 0);
    tslib_1.__decorate([
        Input('clrOff'),
        tslib_1.__metadata("design:type", Boolean)
    ], ClrAlert.prototype, "off", void 0);
    tslib_1.__decorate([
        Input('clrAlertIcon'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], ClrAlert.prototype, "alertIconShape", null);
    tslib_1.__decorate([
        ContentChildren(ClrAlertText, { descendants: true, read: ElementRef }),
        tslib_1.__metadata("design:type", QueryList)
    ], ClrAlert.prototype, "alertTexts", void 0);
    ClrAlert = tslib_1.__decorate([
        Component({
            selector: 'clr-alert',
            providers: [AlertIconAndTypesService, AriaLiveService],
            template: "<!--\n  ~ Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div\n    *ngIf=\"!_closed\"\n    class=\"alert\"\n    [ngClass]=\"alertClass\"\n    [class.alert-hidden]=\"isHidden\"\n    [class.alert-sm]=\"isSmall\"\n    [class.alert-app-level]=\"isAppLevel\">\n    <div class=\"alert-items\">\n        <ng-content></ng-content>\n    </div>\n    <button\n        type=\"button\"\n        class=\"close\"\n        *ngIf=\"closable\"\n        (click)=\"close()\"\n        [attr.aria-label]=\"clrCloseButtonAriaLabel\"\n        >\n        <clr-icon shape=\"close\"></clr-icon>\n    </button>\n</div>\n",
            styles: [':host { display: block; }']
        }),
        tslib_1.__param(2, Optional()),
        tslib_1.__metadata("design:paramtypes", [AlertIconAndTypesService,
            ChangeDetectorRef,
            MultiAlertService,
            ClrCommonStringsService,
            AriaLiveService])
    ], ClrAlert);
    return ClrAlert;
}());
export { ClrAlert };
//# sourceMappingURL=data:application/json;base64,