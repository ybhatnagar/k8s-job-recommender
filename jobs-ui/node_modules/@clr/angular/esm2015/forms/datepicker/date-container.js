import * as tslib_1 from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Optional, ContentChild, ViewChild, ElementRef, Input, } from '@angular/core';
import { IfOpenService } from '../../utils/conditional/if-open.service';
import { IfErrorService } from '../common/if-error/if-error.service';
import { ControlClassService } from '../common/providers/control-class.service';
import { ControlIdService } from '../common/providers/control-id.service';
import { FocusService } from '../common/providers/focus.service';
import { LayoutService } from '../common/providers/layout.service';
import { NgControlService } from '../common/providers/ng-control.service';
import { ClrLabel } from '../common/label';
import { DateFormControlService } from './providers/date-form-control.service';
import { DateIOService } from './providers/date-io.service';
import { DateNavigationService } from './providers/date-navigation.service';
import { DatepickerEnabledService } from './providers/datepicker-enabled.service';
import { LocaleHelperService } from './providers/locale-helper.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
let ClrDateContainer = class ClrDateContainer {
    constructor(_ifOpenService, _dateNavigationService, _datepickerEnabledService, dateFormControlService, commonStrings, ifErrorService, focusService, controlClassService, layoutService, ngControlService) {
        this._ifOpenService = _ifOpenService;
        this._dateNavigationService = _dateNavigationService;
        this._datepickerEnabledService = _datepickerEnabledService;
        this.dateFormControlService = dateFormControlService;
        this.commonStrings = commonStrings;
        this.ifErrorService = ifErrorService;
        this.focusService = focusService;
        this.controlClassService = controlClassService;
        this.layoutService = layoutService;
        this.ngControlService = ngControlService;
        this._dynamic = false;
        this.invalid = false;
        this.focus = false;
        this.subscriptions = [];
        this.subscriptions.push(this.focusService.focusChange.subscribe(state => {
            this.focus = state;
        }));
        this.subscriptions.push(this.ngControlService.controlChanges.subscribe(control => {
            this.control = control;
        }));
    }
    set actionButton(button) {
        this.toggleButton = button;
    }
    ngOnInit() {
        this.subscriptions.push(this.ifErrorService.statusChanges.subscribe(invalid => {
            this.invalid = invalid;
        }));
    }
    ngAfterViewInit() {
        this.subscriptions.push(this._ifOpenService.openChange.subscribe(open => {
            if (open) {
                this.initializeCalendar();
            }
            else {
                this.toggleButton.nativeElement.focus();
            }
        }));
    }
    /**
     * Returns the classes to apply to the control
     */
    controlClass() {
        return this.controlClassService.controlClass(this.invalid, this.addGrid());
    }
    /**
     * Determines if the control needs to add grid classes
     */
    addGrid() {
        if (this.layoutService && !this.layoutService.isVertical()) {
            return true;
        }
        return false;
    }
    /**
     * Returns if the Datepicker is enabled or not. If disabled, hides the datepicker trigger.
     */
    get isEnabled() {
        return this._datepickerEnabledService.isEnabled;
    }
    /**
     * Return if Datepicker is diabled or not as Form Control
     */
    get isInputDateDisabled() {
        /* clrForm wrapper or without clrForm */
        return ((this.control && this.control.disabled) || (this.dateFormControlService && this.dateFormControlService.disabled));
    }
    /**
     * Processes the user input and Initializes the Calendar everytime the datepicker popover is open.
     */
    initializeCalendar() {
        this._dateNavigationService.initializeCalendar();
    }
    /**
     * Toggles the Datepicker Popover.
     */
    toggleDatepicker(event) {
        this._ifOpenService.toggleWithEvent(event);
        this.dateFormControlService.markAsTouched();
    }
    /**
     * Unsubscribe from subscriptions.
     */
    ngOnDestroy() {
        this.subscriptions.map(sub => sub.unsubscribe());
    }
};
tslib_1.__decorate([
    ContentChild(ClrLabel, { static: false }),
    tslib_1.__metadata("design:type", ClrLabel)
], ClrDateContainer.prototype, "label", void 0);
tslib_1.__decorate([
    Input('clrPosition'),
    tslib_1.__metadata("design:type", String)
], ClrDateContainer.prototype, "position", void 0);
tslib_1.__decorate([
    ViewChild('actionButton', { static: false }),
    tslib_1.__metadata("design:type", ElementRef),
    tslib_1.__metadata("design:paramtypes", [ElementRef])
], ClrDateContainer.prototype, "actionButton", null);
ClrDateContainer = tslib_1.__decorate([
    Component({
        selector: 'clr-date-container',
        template: `
      <ng-content select="label"></ng-content>
      <label *ngIf="!label && addGrid()"></label>
      <div class="clr-control-container" [ngClass]="controlClass()">
        <div class="clr-input-wrapper">
          <div class="clr-input-group" [class.clr-focus]="focus">
            <ng-content select="[clrDate]"></ng-content>
            <button #actionButton
                    type="button"
                    class="clr-input-group-icon-action"
                    [attr.title]="commonStrings.keys.datepickerToggle"
                    [attr.aria-label]="commonStrings.keys.datepickerToggle"
                    [disabled]="isInputDateDisabled"
                    (click)="toggleDatepicker($event)"
                    *ngIf="isEnabled">
              <clr-icon shape="calendar"></clr-icon>
            </button>
            <clr-datepicker-view-manager *clrIfOpen clrFocusTrap [clrPosition]="position"></clr-datepicker-view-manager>
          </div>
          <clr-icon class="clr-validate-icon" shape="exclamation-circle"></clr-icon>
        </div>
        <ng-content select="clr-control-helper" *ngIf="!invalid"></ng-content>
        <ng-content select="clr-control-error" *ngIf="invalid"></ng-content>
      </div>
    `,
        providers: [
            ControlIdService,
            IfOpenService,
            LocaleHelperService,
            IfErrorService,
            ControlClassService,
            FocusService,
            NgControlService,
            DateIOService,
            DateNavigationService,
            DatepickerEnabledService,
            DateFormControlService,
        ],
        host: {
            '[class.clr-form-control-disabled]': 'isInputDateDisabled',
            '[class.clr-form-control]': 'true',
            '[class.clr-row]': 'addGrid()',
        }
    }),
    tslib_1.__param(8, Optional()),
    tslib_1.__metadata("design:paramtypes", [IfOpenService,
        DateNavigationService,
        DatepickerEnabledService,
        DateFormControlService,
        ClrCommonStringsService,
        IfErrorService,
        FocusService,
        ControlClassService,
        LayoutService,
        NgControlService])
], ClrDateContainer);
export { ClrDateContainer };
//# sourceMappingURL=data:application/json;base64,