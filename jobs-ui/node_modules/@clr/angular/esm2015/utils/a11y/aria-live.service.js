/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import * as tslib_1 from "tslib";
import { PLATFORM_ID } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, NgZone } from '@angular/core';
import { uniqueIdFactory } from '../id-generator/id-generator.service';
export var AriaLivePoliteness;
(function (AriaLivePoliteness) {
    AriaLivePoliteness["off"] = "off";
    AriaLivePoliteness["polite"] = "polite";
    AriaLivePoliteness["assertive"] = "assertive";
})(AriaLivePoliteness || (AriaLivePoliteness = {}));
/**
 * Time in milliseconds before inserting the content into the container
 */
export const ARIA_LIVE_TICK = 100;
/**
 * This service handle `aria-live` accessibility attribute. The issue is that you need
 * to have the DOM Element with attribute `aria-live` before you could insert content
 * and SR (Screen Reader) pick the change and announce it.
 *
 * @remark
 * This is a private service, nothing here is part of Clarity's public API. It could change at any point in time.
 *
 * ```typescript
 * import { AriaLiveService } from 'src/clr-angular/utils/a11y/aria-live.service';
 *
 * @Component({
 * selector: 'clr-demo-component',
 * providers: [AriaLiveService],
 * template: `
 *   <ng-content></ng-content>
 * `,
 * })
 * export class DemoComponent {
 *  constructor(ariaLiveService: AriaLiveService) {}
 *
 *  public actionThatWillTriggerChange() {
 *    this.ariaLiveService.announce('message that I want to announce to SR');
 *  }
 * }
 * ```
 *
 */
let AriaLiveService = class AriaLiveService {
    constructor(ngZone, _document, platformId) {
        this.ngZone = ngZone;
        this.platformId = platformId;
        this._id = `clr-aria-live-element-${uniqueIdFactory()}`;
        this.document = _document;
    }
    /**
     * get access to the internal HTML `id` that gonna be used for the AriaLive container.
     * @return ID of the DOM Element as string.
     */
    get id() {
        return this._id;
    }
    /**
     * Append text content inside the AriaLive Container. This method will check if the
     * DOM Element is existing if not it will create one for us and the will apply the text.
     *
     * ```typescript
     * this.ariaLiveService.announce(this.el.nativeElement);
     * // or
     * this.ariaLiveService.announce('Message to announce to SR');
     * ```
     *
     * @remark
     * When second argument is `AriaLivePoliteness.off` we won't create aria container or update it.
     * The reason for that is that we don't want to do additional work if the SR will ignore it.
     *
     * @param message - This could be simple string or HTMLElement
     * @param politeness - 'polite', 'assertive' or 'off'
     */
    announce(message, politeness = AriaLivePoliteness.polite) {
        if (politeness === AriaLivePoliteness.off) {
            return;
        }
        if (!this.ariaLiveElement && isPlatformBrowser(this.platformId)) {
            this.ariaLiveElement = this.createContainer();
        }
        message = typeof message !== 'string' && isPlatformBrowser(this.platformId) ? message.textContent : message;
        // when there is no message do NOTHING!
        if (!message) {
            return;
        }
        this.ariaLiveElement.setAttribute('aria-live', politeness);
        // This 100ms timeout is necessary for some browser + screen-reader combinations:
        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.
        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a
        //   second time without clearing and then using a non-zero delay.
        // (using JAWS 17 at time of this writing).
        this.ngZone.runOutsideAngular(() => {
            // This clearTimeout will stop all older messages from announcing
            // in the case where the messages are comming too fast we gonna try to append only
            // the last one. That's what the SR will try to do anyway.
            clearTimeout(this.previousTimeout);
            this.previousTimeout = setTimeout(() => {
                this.ariaLiveElement.textContent = message;
            }, ARIA_LIVE_TICK);
        });
    }
    /**
     * onDestroy life cycle - must stop all active setTimeouts and remove the AriaLive
     * container from the document.
     */
    ngOnDestroy() {
        clearTimeout(this.previousTimeout);
        if (isPlatformBrowser(this.platformId) && this.ariaLiveElement) {
            this.document.body.removeChild(this.ariaLiveElement);
            this.ariaLiveElement = null;
        }
    }
    /**
     * Create AriaLive DOM element as a last child of the document.
     * After the element is created, we gonna apply Clarity class to hide it from
     * the screen and set the `aria-live` politness.
     *
     * `clr-sr-only` is the CSS class that is used to hide the element from the screen.
     *
     * @remark
     * Calling this method multiple times will create multiple DOM Elements, that
     * won't be tracked and will be GC after the service is destroyed.
     *
     * @return AriaLive container as HTMLElement
     *
     */
    createContainer() {
        const ariaLiveElement = this.document.createElement('div');
        ariaLiveElement.setAttribute('id', this.id);
        // Use clarity screen reader class to hide the dom element
        // and fix the scrollbar shake
        ariaLiveElement.classList.add('clr-sr-only');
        ariaLiveElement.setAttribute('aria-atomic', 'true');
        ariaLiveElement.setAttribute('aria-live', AriaLivePoliteness.polite);
        this.document.body.appendChild(ariaLiveElement);
        return ariaLiveElement;
    }
};
AriaLiveService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(1, Inject(DOCUMENT)),
    tslib_1.__param(2, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [NgZone, Object, Object])
], AriaLiveService);
export { AriaLiveService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJpYS1saXZlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2xyL2FuZ3VsYXIvIiwic291cmNlcyI6WyJ1dGlscy9hMTF5L2FyaWEtbGl2ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7O0FBRUgsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1QyxPQUFPLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUV2RSxNQUFNLENBQU4sSUFBWSxrQkFJWDtBQUpELFdBQVksa0JBQWtCO0lBQzVCLGlDQUFXLENBQUE7SUFDWCx1Q0FBaUIsQ0FBQTtJQUNqQiw2Q0FBdUIsQ0FBQTtBQUN6QixDQUFDLEVBSlcsa0JBQWtCLEtBQWxCLGtCQUFrQixRQUk3QjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFXLEdBQUcsQ0FBQztBQUUxQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMkJHO0FBRUgsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtJQUsxQixZQUNVLE1BQWMsRUFDSixTQUFjLEVBQ0gsVUFBa0I7UUFGdkMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUVPLGVBQVUsR0FBVixVQUFVLENBQVE7UUFLekMsUUFBRyxHQUFXLHlCQUF5QixlQUFlLEVBQUUsRUFBRSxDQUFDO1FBSGpFLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO0lBQzVCLENBQUM7SUFHRDs7O09BR0c7SUFDSCxJQUFXLEVBQUU7UUFDWCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7O09BZ0JHO0lBQ0ksUUFBUSxDQUFDLE9BQTZCLEVBQUUsYUFBaUMsa0JBQWtCLENBQUMsTUFBTTtRQUN2RyxJQUFJLFVBQVUsS0FBSyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7WUFDekMsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQy9ELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQy9DO1FBRUQsT0FBTyxHQUFHLE9BQU8sT0FBTyxLQUFLLFFBQVEsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUU1Ryx1Q0FBdUM7UUFDdkMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUUzRCxpRkFBaUY7UUFDakYsd0ZBQXdGO1FBQ3hGLDJGQUEyRjtRQUMzRixrRUFBa0U7UUFDbEUsMkNBQTJDO1FBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2pDLGlFQUFpRTtZQUNqRSxrRkFBa0Y7WUFDbEYsMERBQTBEO1lBQzFELFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNyQyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsR0FBVyxPQUFPLENBQUM7WUFDckQsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNJLFdBQVc7UUFDaEIsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUVuQyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQzlELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7T0FhRztJQUNLLGVBQWU7UUFDckIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFM0QsZUFBZSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLDBEQUEwRDtRQUMxRCw4QkFBOEI7UUFDOUIsZUFBZSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFN0MsZUFBZSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDcEQsZUFBZSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFckUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRWhELE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7Q0FDRixDQUFBO0FBbkhZLGVBQWU7SUFEM0IsVUFBVSxFQUFFO0lBUVIsbUJBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ2hCLG1CQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTs2Q0FGSixNQUFNLFVBRW1CLE1BQU07R0FSdEMsZUFBZSxDQW1IM0I7U0FuSFksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAxOSBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5ULCBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE5nWm9uZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB1bmlxdWVJZEZhY3RvcnkgfSBmcm9tICcuLi9pZC1nZW5lcmF0b3IvaWQtZ2VuZXJhdG9yLnNlcnZpY2UnO1xuXG5leHBvcnQgZW51bSBBcmlhTGl2ZVBvbGl0ZW5lc3Mge1xuICBvZmYgPSAnb2ZmJyxcbiAgcG9saXRlID0gJ3BvbGl0ZScsXG4gIGFzc2VydGl2ZSA9ICdhc3NlcnRpdmUnLFxufVxuXG4vKipcbiAqIFRpbWUgaW4gbWlsbGlzZWNvbmRzIGJlZm9yZSBpbnNlcnRpbmcgdGhlIGNvbnRlbnQgaW50byB0aGUgY29udGFpbmVyXG4gKi9cbmV4cG9ydCBjb25zdCBBUklBX0xJVkVfVElDSzogbnVtYmVyID0gMTAwO1xuXG4vKipcbiAqIFRoaXMgc2VydmljZSBoYW5kbGUgYGFyaWEtbGl2ZWAgYWNjZXNzaWJpbGl0eSBhdHRyaWJ1dGUuIFRoZSBpc3N1ZSBpcyB0aGF0IHlvdSBuZWVkXG4gKiB0byBoYXZlIHRoZSBET00gRWxlbWVudCB3aXRoIGF0dHJpYnV0ZSBgYXJpYS1saXZlYCBiZWZvcmUgeW91IGNvdWxkIGluc2VydCBjb250ZW50XG4gKiBhbmQgU1IgKFNjcmVlbiBSZWFkZXIpIHBpY2sgdGhlIGNoYW5nZSBhbmQgYW5ub3VuY2UgaXQuXG4gKlxuICogQHJlbWFya1xuICogVGhpcyBpcyBhIHByaXZhdGUgc2VydmljZSwgbm90aGluZyBoZXJlIGlzIHBhcnQgb2YgQ2xhcml0eSdzIHB1YmxpYyBBUEkuIEl0IGNvdWxkIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGltZS5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBBcmlhTGl2ZVNlcnZpY2UgfSBmcm9tICdzcmMvY2xyLWFuZ3VsYXIvdXRpbHMvYTExeS9hcmlhLWxpdmUuc2VydmljZSc7XG4gKlxuICogQENvbXBvbmVudCh7XG4gKiBzZWxlY3RvcjogJ2Nsci1kZW1vLWNvbXBvbmVudCcsXG4gKiBwcm92aWRlcnM6IFtBcmlhTGl2ZVNlcnZpY2VdLFxuICogdGVtcGxhdGU6IGBcbiAqICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICogYCxcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgRGVtb0NvbXBvbmVudCB7XG4gKiAgY29uc3RydWN0b3IoYXJpYUxpdmVTZXJ2aWNlOiBBcmlhTGl2ZVNlcnZpY2UpIHt9XG4gKlxuICogIHB1YmxpYyBhY3Rpb25UaGF0V2lsbFRyaWdnZXJDaGFuZ2UoKSB7XG4gKiAgICB0aGlzLmFyaWFMaXZlU2VydmljZS5hbm5vdW5jZSgnbWVzc2FnZSB0aGF0IEkgd2FudCB0byBhbm5vdW5jZSB0byBTUicpO1xuICogIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFyaWFMaXZlU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgYXJpYUxpdmVFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQ7XG4gIHByaXZhdGUgcHJldmlvdXNUaW1lb3V0OiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIF9kb2N1bWVudDogYW55LFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0XG4gICkge1xuICAgIHRoaXMuZG9jdW1lbnQgPSBfZG9jdW1lbnQ7XG4gIH1cblxuICBwcml2YXRlIF9pZDogc3RyaW5nID0gYGNsci1hcmlhLWxpdmUtZWxlbWVudC0ke3VuaXF1ZUlkRmFjdG9yeSgpfWA7XG4gIC8qKlxuICAgKiBnZXQgYWNjZXNzIHRvIHRoZSBpbnRlcm5hbCBIVE1MIGBpZGAgdGhhdCBnb25uYSBiZSB1c2VkIGZvciB0aGUgQXJpYUxpdmUgY29udGFpbmVyLlxuICAgKiBAcmV0dXJuIElEIG9mIHRoZSBET00gRWxlbWVudCBhcyBzdHJpbmcuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2lkO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZCB0ZXh0IGNvbnRlbnQgaW5zaWRlIHRoZSBBcmlhTGl2ZSBDb250YWluZXIuIFRoaXMgbWV0aG9kIHdpbGwgY2hlY2sgaWYgdGhlXG4gICAqIERPTSBFbGVtZW50IGlzIGV4aXN0aW5nIGlmIG5vdCBpdCB3aWxsIGNyZWF0ZSBvbmUgZm9yIHVzIGFuZCB0aGUgd2lsbCBhcHBseSB0aGUgdGV4dC5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiB0aGlzLmFyaWFMaXZlU2VydmljZS5hbm5vdW5jZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgKiAvLyBvclxuICAgKiB0aGlzLmFyaWFMaXZlU2VydmljZS5hbm5vdW5jZSgnTWVzc2FnZSB0byBhbm5vdW5jZSB0byBTUicpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHJlbWFya1xuICAgKiBXaGVuIHNlY29uZCBhcmd1bWVudCBpcyBgQXJpYUxpdmVQb2xpdGVuZXNzLm9mZmAgd2Ugd29uJ3QgY3JlYXRlIGFyaWEgY29udGFpbmVyIG9yIHVwZGF0ZSBpdC5cbiAgICogVGhlIHJlYXNvbiBmb3IgdGhhdCBpcyB0aGF0IHdlIGRvbid0IHdhbnQgdG8gZG8gYWRkaXRpb25hbCB3b3JrIGlmIHRoZSBTUiB3aWxsIGlnbm9yZSBpdC5cbiAgICpcbiAgICogQHBhcmFtIG1lc3NhZ2UgLSBUaGlzIGNvdWxkIGJlIHNpbXBsZSBzdHJpbmcgb3IgSFRNTEVsZW1lbnRcbiAgICogQHBhcmFtIHBvbGl0ZW5lc3MgLSAncG9saXRlJywgJ2Fzc2VydGl2ZScgb3IgJ29mZidcbiAgICovXG4gIHB1YmxpYyBhbm5vdW5jZShtZXNzYWdlOiBzdHJpbmcgfCBIVE1MRWxlbWVudCwgcG9saXRlbmVzczogQXJpYUxpdmVQb2xpdGVuZXNzID0gQXJpYUxpdmVQb2xpdGVuZXNzLnBvbGl0ZSk6IHZvaWQge1xuICAgIGlmIChwb2xpdGVuZXNzID09PSBBcmlhTGl2ZVBvbGl0ZW5lc3Mub2ZmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmFyaWFMaXZlRWxlbWVudCAmJiBpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICB0aGlzLmFyaWFMaXZlRWxlbWVudCA9IHRoaXMuY3JlYXRlQ29udGFpbmVyKCk7XG4gICAgfVxuXG4gICAgbWVzc2FnZSA9IHR5cGVvZiBtZXNzYWdlICE9PSAnc3RyaW5nJyAmJiBpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpID8gbWVzc2FnZS50ZXh0Q29udGVudCA6IG1lc3NhZ2U7XG5cbiAgICAvLyB3aGVuIHRoZXJlIGlzIG5vIG1lc3NhZ2UgZG8gTk9USElORyFcbiAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmFyaWFMaXZlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsIHBvbGl0ZW5lc3MpO1xuXG4gICAgLy8gVGhpcyAxMDBtcyB0aW1lb3V0IGlzIG5lY2Vzc2FyeSBmb3Igc29tZSBicm93c2VyICsgc2NyZWVuLXJlYWRlciBjb21iaW5hdGlvbnM6XG4gICAgLy8gLSBCb3RoIEpBV1MgYW5kIE5WREEgb3ZlciBJRTExIHdpbGwgbm90IGFubm91bmNlIGFueXRoaW5nIHdpdGhvdXQgYSBub24temVybyB0aW1lb3V0LlxuICAgIC8vIC0gV2l0aCBDaHJvbWUgYW5kIElFMTEgd2l0aCBOVkRBIG9yIEpBV1MsIGEgcmVwZWF0ZWQgKGlkZW50aWNhbCkgbWVzc2FnZSB3b24ndCBiZSByZWFkIGFcbiAgICAvLyAgIHNlY29uZCB0aW1lIHdpdGhvdXQgY2xlYXJpbmcgYW5kIHRoZW4gdXNpbmcgYSBub24temVybyBkZWxheS5cbiAgICAvLyAodXNpbmcgSkFXUyAxNyBhdCB0aW1lIG9mIHRoaXMgd3JpdGluZykuXG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgLy8gVGhpcyBjbGVhclRpbWVvdXQgd2lsbCBzdG9wIGFsbCBvbGRlciBtZXNzYWdlcyBmcm9tIGFubm91bmNpbmdcbiAgICAgIC8vIGluIHRoZSBjYXNlIHdoZXJlIHRoZSBtZXNzYWdlcyBhcmUgY29tbWluZyB0b28gZmFzdCB3ZSBnb25uYSB0cnkgdG8gYXBwZW5kIG9ubHlcbiAgICAgIC8vIHRoZSBsYXN0IG9uZS4gVGhhdCdzIHdoYXQgdGhlIFNSIHdpbGwgdHJ5IHRvIGRvIGFueXdheS5cbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnByZXZpb3VzVGltZW91dCk7XG4gICAgICB0aGlzLnByZXZpb3VzVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmFyaWFMaXZlRWxlbWVudC50ZXh0Q29udGVudCA9IDxzdHJpbmc+bWVzc2FnZTtcbiAgICAgIH0sIEFSSUFfTElWRV9USUNLKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvbkRlc3Ryb3kgbGlmZSBjeWNsZSAtIG11c3Qgc3RvcCBhbGwgYWN0aXZlIHNldFRpbWVvdXRzIGFuZCByZW1vdmUgdGhlIEFyaWFMaXZlXG4gICAqIGNvbnRhaW5lciBmcm9tIHRoZSBkb2N1bWVudC5cbiAgICovXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5wcmV2aW91c1RpbWVvdXQpO1xuXG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkgJiYgdGhpcy5hcmlhTGl2ZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmFyaWFMaXZlRWxlbWVudCk7XG4gICAgICB0aGlzLmFyaWFMaXZlRWxlbWVudCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBBcmlhTGl2ZSBET00gZWxlbWVudCBhcyBhIGxhc3QgY2hpbGQgb2YgdGhlIGRvY3VtZW50LlxuICAgKiBBZnRlciB0aGUgZWxlbWVudCBpcyBjcmVhdGVkLCB3ZSBnb25uYSBhcHBseSBDbGFyaXR5IGNsYXNzIHRvIGhpZGUgaXQgZnJvbVxuICAgKiB0aGUgc2NyZWVuIGFuZCBzZXQgdGhlIGBhcmlhLWxpdmVgIHBvbGl0bmVzcy5cbiAgICpcbiAgICogYGNsci1zci1vbmx5YCBpcyB0aGUgQ1NTIGNsYXNzIHRoYXQgaXMgdXNlZCB0byBoaWRlIHRoZSBlbGVtZW50IGZyb20gdGhlIHNjcmVlbi5cbiAgICpcbiAgICogQHJlbWFya1xuICAgKiBDYWxsaW5nIHRoaXMgbWV0aG9kIG11bHRpcGxlIHRpbWVzIHdpbGwgY3JlYXRlIG11bHRpcGxlIERPTSBFbGVtZW50cywgdGhhdFxuICAgKiB3b24ndCBiZSB0cmFja2VkIGFuZCB3aWxsIGJlIEdDIGFmdGVyIHRoZSBzZXJ2aWNlIGlzIGRlc3Ryb3llZC5cbiAgICpcbiAgICogQHJldHVybiBBcmlhTGl2ZSBjb250YWluZXIgYXMgSFRNTEVsZW1lbnRcbiAgICpcbiAgICovXG4gIHByaXZhdGUgY3JlYXRlQ29udGFpbmVyKCk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCBhcmlhTGl2ZUVsZW1lbnQgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgYXJpYUxpdmVFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLmlkKTtcbiAgICAvLyBVc2UgY2xhcml0eSBzY3JlZW4gcmVhZGVyIGNsYXNzIHRvIGhpZGUgdGhlIGRvbSBlbGVtZW50XG4gICAgLy8gYW5kIGZpeCB0aGUgc2Nyb2xsYmFyIHNoYWtlXG4gICAgYXJpYUxpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2Nsci1zci1vbmx5Jyk7XG5cbiAgICBhcmlhTGl2ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWF0b21pYycsICd0cnVlJyk7XG4gICAgYXJpYUxpdmVFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgQXJpYUxpdmVQb2xpdGVuZXNzLnBvbGl0ZSk7XG5cbiAgICB0aGlzLmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYXJpYUxpdmVFbGVtZW50KTtcblxuICAgIHJldHVybiBhcmlhTGl2ZUVsZW1lbnQ7XG4gIH1cbn1cbiJdfQ==