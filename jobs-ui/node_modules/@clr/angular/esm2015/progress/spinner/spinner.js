import * as tslib_1 from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, HostBinding, ElementRef } from '@angular/core';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
import { AriaLiveService, AriaLivePoliteness } from '../../utils/a11y/aria-live.service';
let ClrSpinner = class ClrSpinner {
    constructor(el, ariaLiveService) {
        this.el = el;
        this.ariaLiveService = ariaLiveService;
    }
    ngAfterViewInit() {
        this.ariaLiveService.announce(this.el.nativeElement, this.ariaLive);
    }
    /**
     * Default class for all spinners. This class is always true
     */
    get spinnerClass() {
        return true;
    }
    get inlineClass() {
        return this._inline;
    }
    set clrInline(value) {
        this._inline = isBooleanAttributeSet(value);
    }
    get inverseClass() {
        return this._inverse;
    }
    set clrInverse(value) {
        this._inverse = isBooleanAttributeSet(value);
    }
    get smallClass() {
        return this._small;
    }
    set clrSmall(value) {
        this._small = isBooleanAttributeSet(value);
    }
    get mediumClass() {
        if (this._small) {
            return false;
        }
        return this._medium;
    }
    set clrMedium(value) {
        this._medium = isBooleanAttributeSet(value);
    }
    get ariaLive() {
        if (isBooleanAttributeSet(this.assertive)) {
            return AriaLivePoliteness.assertive;
        }
        if (isBooleanAttributeSet(this.off)) {
            return AriaLivePoliteness.off;
        }
        return AriaLivePoliteness.polite;
    }
};
tslib_1.__decorate([
    HostBinding('class.spinner'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [])
], ClrSpinner.prototype, "spinnerClass", null);
tslib_1.__decorate([
    HostBinding('class.spinner-inline'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [])
], ClrSpinner.prototype, "inlineClass", null);
tslib_1.__decorate([
    Input('clrInline'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ClrSpinner.prototype, "clrInline", null);
tslib_1.__decorate([
    HostBinding('class.spinner-inverse'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [])
], ClrSpinner.prototype, "inverseClass", null);
tslib_1.__decorate([
    Input('clrInverse'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ClrSpinner.prototype, "clrInverse", null);
tslib_1.__decorate([
    HostBinding('class.spinner-sm'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [])
], ClrSpinner.prototype, "smallClass", null);
tslib_1.__decorate([
    Input('clrSmall'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ClrSpinner.prototype, "clrSmall", null);
tslib_1.__decorate([
    HostBinding('class.spinner-md'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [])
], ClrSpinner.prototype, "mediumClass", null);
tslib_1.__decorate([
    Input('clrMedium'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ClrSpinner.prototype, "clrMedium", null);
tslib_1.__decorate([
    Input('clrAssertive'),
    tslib_1.__metadata("design:type", Boolean)
], ClrSpinner.prototype, "assertive", void 0);
tslib_1.__decorate([
    Input('clrOff'),
    tslib_1.__metadata("design:type", Boolean)
], ClrSpinner.prototype, "off", void 0);
ClrSpinner = tslib_1.__decorate([
    Component({
        selector: 'clr-spinner',
        providers: [AriaLiveService],
        template: `
    <ng-content></ng-content>
  `,
        host: {
            '[attr.aria-busy]': 'true',
        }
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, AriaLiveService])
], ClrSpinner);
export { ClrSpinner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbInByb2dyZXNzL3NwaW5uZXIvc3Bpbm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxlQUFlLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQVl6RixJQUFhLFVBQVUsR0FBdkIsTUFBYSxVQUFVO0lBQ3JCLFlBQW9CLEVBQWMsRUFBVSxlQUFnQztRQUF4RCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBQUcsQ0FBQztJQUVoRixlQUFlO1FBQ2IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRDs7T0FFRztJQUVILElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUtELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBR0QsSUFBSSxTQUFTLENBQUMsS0FBdUI7UUFDbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBSUQsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFHRCxJQUFJLFVBQVUsQ0FBQyxLQUF1QjtRQUNwQyxJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFhRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUdELElBQUksUUFBUSxDQUFDLEtBQXVCO1FBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQWVELElBQUksV0FBVztRQUNiLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUdELElBQUksU0FBUyxDQUFDLEtBQXVCO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQW1CRCxJQUFJLFFBQVE7UUFDVixJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN6QyxPQUFPLGtCQUFrQixDQUFDLFNBQVMsQ0FBQztTQUNyQztRQUNELElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ25DLE9BQU8sa0JBQWtCLENBQUMsR0FBRyxDQUFDO1NBQy9CO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7SUFDbkMsQ0FBQztDQUNGLENBQUE7QUFsR0M7SUFEQyxXQUFXLENBQUMsZUFBZSxDQUFDOzs7OENBRzVCO0FBS0Q7SUFEQyxXQUFXLENBQUMsc0JBQXNCLENBQUM7Ozs2Q0FHbkM7QUFHRDtJQURDLEtBQUssQ0FBQyxXQUFXLENBQUM7OzsyQ0FHbEI7QUFJRDtJQURDLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQzs7OzhDQUdwQztBQUdEO0lBREMsS0FBSyxDQUFDLFlBQVksQ0FBQzs7OzRDQUduQjtBQWFEO0lBREMsV0FBVyxDQUFDLGtCQUFrQixDQUFDOzs7NENBRy9CO0FBR0Q7SUFEQyxLQUFLLENBQUMsVUFBVSxDQUFDOzs7MENBR2pCO0FBZUQ7SUFEQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7Ozs2Q0FNL0I7QUFHRDtJQURDLEtBQUssQ0FBQyxXQUFXLENBQUM7OzsyQ0FHbEI7QUFpQnNCO0lBQXRCLEtBQUssQ0FBQyxjQUFjLENBQUM7OzZDQUFvQjtBQUN6QjtJQUFoQixLQUFLLENBQUMsUUFBUSxDQUFDOzt1Q0FBYztBQW5HbkIsVUFBVTtJQVZ0QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsYUFBYTtRQUN2QixTQUFTLEVBQUUsQ0FBQyxlQUFlLENBQUM7UUFDNUIsUUFBUSxFQUFFOztHQUVUO1FBQ0QsSUFBSSxFQUFFO1lBQ0osa0JBQWtCLEVBQUUsTUFBTTtTQUMzQjtLQUNGLENBQUM7NkNBRXdCLFVBQVUsRUFBMkIsZUFBZTtHQURqRSxVQUFVLENBNkd0QjtTQTdHWSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE5IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSG9zdEJpbmRpbmcsIEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzQm9vbGVhbkF0dHJpYnV0ZVNldCB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbXBvbmVudC9pcy1ib29sZWFuLWF0dHJpYnV0ZS1zZXQnO1xuaW1wb3J0IHsgQXJpYUxpdmVTZXJ2aWNlLCBBcmlhTGl2ZVBvbGl0ZW5lc3MgfSBmcm9tICcuLi8uLi91dGlscy9hMTF5L2FyaWEtbGl2ZS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2xyLXNwaW5uZXInLFxuICBwcm92aWRlcnM6IFtBcmlhTGl2ZVNlcnZpY2VdLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgYCxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5hcmlhLWJ1c3ldJzogJ3RydWUnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJTcGlubmVyIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgYXJpYUxpdmVTZXJ2aWNlOiBBcmlhTGl2ZVNlcnZpY2UpIHt9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuYXJpYUxpdmVTZXJ2aWNlLmFubm91bmNlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcy5hcmlhTGl2ZSk7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCBjbGFzcyBmb3IgYWxsIHNwaW5uZXJzLiBUaGlzIGNsYXNzIGlzIGFsd2F5cyB0cnVlXG4gICAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNwaW5uZXInKVxuICBnZXQgc3Bpbm5lckNsYXNzKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gU3R5bGVcbiAgcHJpdmF0ZSBfaW5saW5lOiBib29sZWFuO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNwaW5uZXItaW5saW5lJylcbiAgZ2V0IGlubGluZUNsYXNzKCkge1xuICAgIHJldHVybiB0aGlzLl9pbmxpbmU7XG4gIH1cblxuICBASW5wdXQoJ2NscklubGluZScpXG4gIHNldCBjbHJJbmxpbmUodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICB0aGlzLl9pbmxpbmUgPSBpc0Jvb2xlYW5BdHRyaWJ1dGVTZXQodmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBfaW52ZXJzZTogYm9vbGVhbjtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zcGlubmVyLWludmVyc2UnKVxuICBnZXQgaW52ZXJzZUNsYXNzKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnZlcnNlO1xuICB9XG5cbiAgQElucHV0KCdjbHJJbnZlcnNlJylcbiAgc2V0IGNsckludmVyc2UodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICB0aGlzLl9pbnZlcnNlID0gaXNCb29sZWFuQXR0cmlidXRlU2V0KHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNpemVcbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgYWxsIHNwaW5uZXJzIGFyZSBMYXJnZS4gKHNwaW5uZXItbGcpXG4gICAqIFRvIGNoYW5nZSB0aGUgc2l6ZSB5b3UgbmVlZCB0byB1c2Ugc2V0IGNsclNtYWxsIG9yIGNsck1lZGl1bSB0byBUUlVFL1xuICAgKi9cblxuICAvKipcbiAgICogU21hbGxcbiAgICovXG4gIHByaXZhdGUgX3NtYWxsOiBib29sZWFuO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNwaW5uZXItc20nKVxuICBnZXQgc21hbGxDbGFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5fc21hbGw7XG4gIH1cblxuICBASW5wdXQoJ2NsclNtYWxsJylcbiAgc2V0IGNsclNtYWxsKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5fc21hbGwgPSBpc0Jvb2xlYW5BdHRyaWJ1dGVTZXQodmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gY2xyU21hbGwgJiBjbHJNZWRpdW0gYXJlIHNldCBib3RoIHRvIHRydWUuXG4gICAqIFRoZSBDU1Mgd2l0aCBoaWdoIHByaW9yaXR5IHdpbGwgYmUgc21hbGwgLSBzbyBtZWRpdW0gc2l6ZSB3aWxsIGJlIGlnbm9yZWQuXG4gICAqXG4gICAqIEZvciB0aGlzIHJlYXNvbiBpZiBjbHJTbWFsbCBpcyBzZXQgd2Ugd29uJ3QgYWRkIGNsck1lZGl1bSBjbGFzcy5cbiAgICpcbiAgICogTk9URTogVGhpcyBpcyBkaWN0YXRlZCBieSB0aGUgQ1NTIHJ1bGVzLlxuICAgKiBET04nVCBVU0UgY2xyU21hbGwgJiBjbHJNZWRpdW0gdG8gdG9nZ2xlIGNsYXNzZXMuIFRoaXMgY291bGQgY2hhbmdlIHdpdGhvdXQgbm90aWNlLlxuICAgKlxuICAgKiBBbHNvIHRoZXJlIGlzIG5vIGxvZ2ljYWwgbmVlZCB0byBoYXZlIGJvdGggb2YgdGhlbSBzZXQgdG8gVFJVRSBvciBGQUxTRS5cbiAgICovXG4gIHByaXZhdGUgX21lZGl1bTogYm9vbGVhbjtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zcGlubmVyLW1kJylcbiAgZ2V0IG1lZGl1bUNsYXNzKCkge1xuICAgIGlmICh0aGlzLl9zbWFsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbWVkaXVtO1xuICB9XG5cbiAgQElucHV0KCdjbHJNZWRpdW0nKVxuICBzZXQgY2xyTWVkaXVtKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5fbWVkaXVtID0gaXNCb29sZWFuQXR0cmlidXRlU2V0KHZhbHVlKTtcbiAgfVxuXG4gIC8vIEFyaWEgTGl2ZVxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IGFyaWEtbGl2ZSB3aWxsIGJlIHNldCB0byBgcG9saXRlYCAuXG4gICAqIFRvIGNoYW5nZSBpcyBpdCB5b3UgbmVlZCB0byBzZXQgY2xyQXNzZXJ0aXZlIG9yIGNsck9mZiB0byBUUlVFXG4gICAqXG4gICAqIFRoZXJlIGlzIHByaW9yaXR5OlxuICAgKiAgIERlZmF1bHQ6IHBvbGl0ZVxuICAgKiAgIEFzZXJ0aXZlXG4gICAqICAgT2ZmXG4gICAqXG4gICAqIEluIGNhc2Ugd2hlbiBmb3Igc29tZSByZWFzb24geW91IGhhdmUgY2xyQXNzZXJ0aXZlPVRSVUUgYW5kIGNsck9mZj1UUlVFLFxuICAgKiB3ZSBnb25uYSBzZXQgYGFzc2VydGl2ZWAgYXMgdmFsdWUgb2YgYXJpYS1saXZlLlxuICAgKlxuICAgKi9cbiAgQElucHV0KCdjbHJBc3NlcnRpdmUnKSBhc3NlcnRpdmU6IGJvb2xlYW47XG4gIEBJbnB1dCgnY2xyT2ZmJykgb2ZmOiBib29sZWFuO1xuICBnZXQgYXJpYUxpdmUoKTogQXJpYUxpdmVQb2xpdGVuZXNzIHtcbiAgICBpZiAoaXNCb29sZWFuQXR0cmlidXRlU2V0KHRoaXMuYXNzZXJ0aXZlKSkge1xuICAgICAgcmV0dXJuIEFyaWFMaXZlUG9saXRlbmVzcy5hc3NlcnRpdmU7XG4gICAgfVxuICAgIGlmIChpc0Jvb2xlYW5BdHRyaWJ1dGVTZXQodGhpcy5vZmYpKSB7XG4gICAgICByZXR1cm4gQXJpYUxpdmVQb2xpdGVuZXNzLm9mZjtcbiAgICB9XG4gICAgcmV0dXJuIEFyaWFMaXZlUG9saXRlbmVzcy5wb2xpdGU7XG4gIH1cbn1cbiJdfQ==