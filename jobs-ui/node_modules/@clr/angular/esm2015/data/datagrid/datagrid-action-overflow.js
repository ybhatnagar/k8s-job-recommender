import * as tslib_1 from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Inject, Input, Output, NgZone, PLATFORM_ID } from '@angular/core';
import { RowActionService } from './providers/row-action-service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { isPlatformBrowser } from '@angular/common';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import { ClrAlignment } from '../../utils/popover/enums/alignment.enum';
import { ClrSide } from '../../utils/popover/enums/side.enum';
import { ClrAxis } from '../../utils/popover/enums/axis.enum';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
let clrDgActionId = 0;
let ClrDatagridActionOverflow = class ClrDatagridActionOverflow {
    constructor(rowActionService, commonStrings, platformId, zone, smartToggleService, popoverId) {
        this.rowActionService = rowActionService;
        this.commonStrings = commonStrings;
        this.platformId = platformId;
        this.zone = zone;
        this.smartToggleService = smartToggleService;
        this.popoverId = popoverId;
        this.subscriptions = [];
        this.smartPosition = {
            axis: ClrAxis.HORIZONTAL,
            side: ClrSide.AFTER,
            anchor: ClrAlignment.CENTER,
            content: ClrAlignment.CENTER,
        };
        this._open = false;
        this.openChange = new EventEmitter(false);
        this.rowActionService.register();
        this.subscriptions.push(this.smartToggleService.openChange.subscribe(openState => {
            this.open = openState;
            if (openState) {
                this.focusFirstButton();
            }
        }));
        this.popoverId = 'clr-action-menu' + clrDgActionId++;
    }
    ngOnDestroy() {
        this.rowActionService.unregister();
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
    get open() {
        return this._open;
    }
    focusFirstButton() {
        if (isPlatformBrowser(this.platformId)) {
            this.zone.runOutsideAngular(() => {
                setTimeout(() => {
                    const firstButton = document.querySelector('button.action-item');
                    if (firstButton) {
                        firstButton.focus();
                    }
                });
            });
        }
    }
    set open(open) {
        const openState = !!open;
        if (!!openState !== this.open) {
            // prevents chocolate mess
            this.smartToggleService.open = openState;
            this.openChange.emit(openState);
            this._open = openState;
        }
    }
};
tslib_1.__decorate([
    Input('clrDgActionOverflowOpen'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], ClrDatagridActionOverflow.prototype, "open", null);
tslib_1.__decorate([
    Output('clrDgActionOverflowOpenChange'),
    tslib_1.__metadata("design:type", Object)
], ClrDatagridActionOverflow.prototype, "openChange", void 0);
ClrDatagridActionOverflow = tslib_1.__decorate([
    Component({
        selector: 'clr-dg-action-overflow',
        providers: [UNIQUE_ID_PROVIDER, ClrPopoverToggleService, ClrPopoverEventsService, ClrPopoverPositionService],
        template: `
      <button class="datagrid-action-toggle"
              type="button"
              role="button"
              aria-haspopup="true"
              #anchor
              [attr.aria-controls]="popoverId"
              [attr.aria-expanded]="open"
              [attr.aria-label]="commonStrings.keys.rowActions"
              clrPopoverAnchor
              clrPopoverOpenCloseButton>
          <clr-icon shape="ellipsis-vertical" [attr.title]="commonStrings.keys.rowActions"></clr-icon>
      </button>

      <div class="datagrid-action-overflow"
           role="menu"
           [id]="popoverId"
           [attr.aria-hidden]="!open"
           [attr.id]="popoverId"
           clrFocusTrap
           *clrPopoverContent="open at smartPosition; outsideClickToClose: true; scrollToClose: true">
          <ng-content></ng-content>
      </div>
  `
    }),
    tslib_1.__param(2, Inject(PLATFORM_ID)),
    tslib_1.__param(5, Inject(UNIQUE_ID)),
    tslib_1.__metadata("design:paramtypes", [RowActionService,
        ClrCommonStringsService,
        Object,
        NgZone,
        ClrPopoverToggleService, String])
], ClrDatagridActionOverflow);
export { ClrDatagridActionOverflow };
//# sourceMappingURL=data:application/json;base64,