import * as tslib_1 from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, HostBinding, Inject, Input, Optional, Output, SkipSelf } from '@angular/core';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
let ClrStackBlock = class ClrStackBlock {
    /*
     * This would be more efficient with @ContentChildren, with the parent ClrStackBlock
     * querying for children StackBlocks, but this feature is not available when downgrading
     * the component for Angular 1.
     */
    constructor(parent, uniqueId, commonStrings) {
        this.parent = parent;
        this.uniqueId = uniqueId;
        this.commonStrings = commonStrings;
        this.expanded = false;
        this.expandedChange = new EventEmitter(false);
        this.expandable = false;
        this.focused = false;
        this._changedChildren = 0;
        this._fullyInitialized = false;
        this._changed = false;
        if (parent) {
            parent.addChild();
        }
    }
    get getChangedValue() {
        return this._changed || (this._changedChildren > 0 && !this.expanded);
    }
    set setChangedValue(value) {
        this._changed = value;
        if (this.parent && this._fullyInitialized) {
            if (value) {
                this.parent._changedChildren++;
            }
            else {
                this.parent._changedChildren--;
            }
        }
    }
    ngOnInit() {
        // in order to access the parent ClrStackBlock's properties,
        // the child ClrStackBlock has to be fully initialized at first.
        this._fullyInitialized = true;
    }
    addChild() {
        this.expandable = true;
    }
    toggleExpand() {
        if (this.expandable) {
            this.expanded = !this.expanded;
            this.expandedChange.emit(this.expanded);
        }
    }
    get caretDirection() {
        return this.expanded ? 'down' : 'right';
    }
    get caretTitle() {
        return this.expanded ? this.commonStrings.keys.collapse : this.commonStrings.keys.expand;
    }
    get role() {
        return this.expandable ? 'button' : null;
    }
    get tabIndex() {
        return this.expandable ? '0' : null;
    }
    get onStackLabelFocus() {
        return this.expandable && !this.expanded && this.focused;
    }
    get ariaExpanded() {
        if (!this.expandable) {
            return null;
        }
        else {
            return this.expanded ? 'true' : 'false';
        }
    }
    getStackChildrenId() {
        return this.expanded ? `clr-stack-children-${this.uniqueId}` : null;
    }
};
tslib_1.__decorate([
    HostBinding('class.stack-block-expanded'),
    Input('clrSbExpanded'),
    tslib_1.__metadata("design:type", Boolean)
], ClrStackBlock.prototype, "expanded", void 0);
tslib_1.__decorate([
    Output('clrSbExpandedChange'),
    tslib_1.__metadata("design:type", EventEmitter)
], ClrStackBlock.prototype, "expandedChange", void 0);
tslib_1.__decorate([
    HostBinding('class.stack-block-expandable'),
    Input('clrSbExpandable'),
    tslib_1.__metadata("design:type", Boolean)
], ClrStackBlock.prototype, "expandable", void 0);
tslib_1.__decorate([
    HostBinding('class.stack-block-changed'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ClrStackBlock.prototype, "getChangedValue", null);
tslib_1.__decorate([
    Input('clrSbNotifyChange'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], ClrStackBlock.prototype, "setChangedValue", null);
tslib_1.__decorate([
    Input('clrStackViewLevel'),
    tslib_1.__metadata("design:type", Number)
], ClrStackBlock.prototype, "ariaLevel", void 0);
tslib_1.__decorate([
    Input('clrStackViewSetsize'),
    tslib_1.__metadata("design:type", Number)
], ClrStackBlock.prototype, "ariaSetsize", void 0);
tslib_1.__decorate([
    Input('clrStackViewPosinset'),
    tslib_1.__metadata("design:type", Number)
], ClrStackBlock.prototype, "ariaPosinset", void 0);
tslib_1.__decorate([
    HostBinding('class.on-focus'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], ClrStackBlock.prototype, "onStackLabelFocus", null);
ClrStackBlock = tslib_1.__decorate([
    Component({
        selector: 'clr-stack-block',
        template: `
    <dt class="stack-block-label"
        (click)="toggleExpand()"
        (keyup.enter)="toggleExpand()"
        (keyup.space)="toggleExpand()"
        (focus)="focused = true"
        (blur)="focused = false"
        [id]="uniqueId"
        [attr.role]="role"
        [attr.tabindex]="tabIndex"
        [attr.aria-expanded]="ariaExpanded"
        [attr.aria-controls]="getStackChildrenId()"
        [attr.aria-posinset]="ariaPosinset"
        [attr.aria-level]="ariaLevel"
        [attr.aria-setsize]="ariaSetsize"
        >
      <clr-icon shape="caret"
                class="stack-block-caret"
                *ngIf="expandable"
                [attr.dir]="caretDirection"
                [attr.title]="caretTitle"></clr-icon>
      <span class="clr-sr-only" *ngIf="getChangedValue">{{commonStrings.keys.stackViewChanged}}</span>
      <ng-content select="clr-stack-label"></ng-content>
    </dt>
    <dd class="stack-block-content">
      <ng-content></ng-content>
    </dd>

    <clr-expandable-animation [@clrExpandTrigger]="expanded" class="stack-children" [attr.id]="getStackChildrenId()">
      <div [style.height]="expanded ? 'auto' : 0">
        <ng-content select="clr-stack-block"></ng-content>
      </div>
    </clr-expandable-animation>
  `,
        // Make sure the host has the proper class for styling purposes
        host: { '[class.stack-block]': 'true' },
        providers: [UNIQUE_ID_PROVIDER],
        styles: [`
      :host {
        display: block;
      }
    `]
    }),
    tslib_1.__param(0, SkipSelf()),
    tslib_1.__param(0, Optional()),
    tslib_1.__param(1, Inject(UNIQUE_ID)),
    tslib_1.__metadata("design:paramtypes", [ClrStackBlock, String, ClrCommonStringsService])
], ClrStackBlock);
export { ClrStackBlock };
//# sourceMappingURL=data:application/json;base64,